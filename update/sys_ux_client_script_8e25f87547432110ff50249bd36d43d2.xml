<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes/>
        <macroponent display_value="DA Modal Ref Tree Lookup">a925b87547432110ff50249bd36d43a9</macroponent>
        <name>Item Clicked</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[function handler({ api, event, helpers, imports }) {
	let rowPayload;
	const { item } = event.payload;
	const {
		props: { referenceTable, referenceKey, referenceField, fieldType }
	} = api.context;
	let newValue;
	let newDisplayValue;
	let newValues = [];
	let newDisplayValues = [];
	const removeItem = (arr, index) => {
		const clone = [...arr];
		clone.splice(index, 1);
		return clone;
	};
	const getRowClickedPayload = ({
		referenceField,
		value,
		sys_id,
		displayValue
	}) => ({
		referenceField,
		row: {
			referenceKeyValue: {
				value
			},
			sys_id: {
				value: sys_id
			},
			displayValue: {
				value: displayValue
			}
		}
	});

	if (referenceTable === item.class || referenceTable === 'cmdb_ci') {
		newValue = referenceKey ? item[referenceKey] : item.id;
		newDisplayValue = item.label;
	} else {
		newValue = item.parentId;
		newDisplayValue = item.parentLabel;
	}

	if (fieldType === 'glide_list') {
		if (referenceTable === item.class || referenceTable === 'cmdb_ci') {
			let selectedItem = api.state.clickedItems;
			let isSelected = false;
			for (let i = 0; i < selectedItem.value.length; i++) {
				if (newValue === selectedItem.value[i]) {
					isSelected = true;
					break;
				}
			}
			if (isSelected) {
				const index = api.state.clickedItems.value.indexOf(newValue);
				if (index >= 0) {
					newValues = removeItem(api.state.clickedItems.value, index);
					newDisplayValues = removeItem(
						api.state.clickedItems.displayValue,
						index
					);
				}
			} else {
				newValues = [...api.state.clickedItems.value, newValue];
				newDisplayValues = [
					...api.state.clickedItems.displayValue,
					newDisplayValue
				];
			}
			api.setState('clickedItems', {
				value: newValues,
				displayValue: newDisplayValues
			});
		}
	} else {
		rowPayload = getRowClickedPayload({
			referenceField,
			value: newValue,
			sys_id: newValue,
			displayValue: newDisplayValue
		});
		if (rowPayload) {
			api.emit('REF_PICK#ROW_CLICKED', rowPayload);
			api.emit('MODAL_SELECTED_RELAY_d7f8b70dff13101035be517f793bf1e0', {
				showModal: false
			});
		}
	}
}
]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-27 05:35:21</sys_created_on>
        <sys_id>8e25f87547432110ff50249bd36d43d2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Item Clicked</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ux_client_script_8e25f87547432110ff50249bd36d43d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-27 05:35:21</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
