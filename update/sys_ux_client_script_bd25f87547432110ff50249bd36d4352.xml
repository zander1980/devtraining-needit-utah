<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>45cf8914eb320110f7e105a3a25228ab</includes>
        <macroponent display_value="DA Modal Ref Tree Lookup">a925b87547432110ff50249bd36d43a9</macroponent>
        <name>Initialise Items</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
function handler({ api, event, helpers, imports }) {
	const { parseGroupTree, parseGeneralTree, parseCITree } =
		imports['global.Content Tree Utils']();
	const {
		props: {
			table,
			referenceTable,
			referenceField,
			dependentField,
			fieldType,
			currentValue,
			displayValue
		}
	} = api.context;
	const {
		treePickerConfig: { processor, targetPath = '', targetValue, queryString },
		domainID
	} = api.data.tree_picker.treePicker;
	let targetPathValue = [[]];
	if (targetPath) {
		targetPathValue = targetPath.split(';').reduce((target, source) => {
			target.push(source.split(','));
			return target;
		}, []);
	}
	let nameSuffix = 'parent';
	let type = 'child';
	const name = `${referenceTable}.${nameSuffix}`;
	const reference = `${table}.${referenceField}`;
	const chars = targetValue || '';
	const target =
		dependentField === ''
			? `${referenceTable}.undefined`
			: `${referenceTable}.${dependentField}`;
       
	const params = {
	    sysparm_processor: processor,
	    method: 'getTreeNodes',
	    sysparm_name: name,
	    sysparm_type: type,
	    sysparm_chars: chars,
	    sysparm_reference: reference,
	    sysparm_target: target,
	    sysparm_dependent_value: targetValue,
	    sysparm_domain: domainID,
	    sysparm_query: queryString || undefined
	};

	if (currentValue !== '')
		api.setState('clickedItems', {
			value: currentValue.split(','),
			displayValue: displayValue.split(',')
		});

	helpers
		.snHttp(
			'/xmlhttp.do',
			{
				method: 'POST',
				batch: false,
				body: {},
				params: params,
				headers: {
					'X-WantSessionNotificationMessages': 'true',
					'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
				}
			}
		)
		.then(async ({ response }) => {
			const xml = Object.values(response).join('');
			let treeJSON;
			if (referenceTable === 'sys_user_group') {
				treeJSON = parseGroupTree(xml);
				api.setState('treeItems', [treeJSON]);
			} else if (referenceTable === 'cmdb_ci') {
				treeJSON = await parseCITree(xml, undefined, targetValue, helpers);
				api.setState('treeItems', treeJSON);
			} else {
				treeJSON = parseGeneralTree(xml);
				api.setState('treeItems', [treeJSON]);
			}

			if (fieldType !== 'glide_list' && targetPathValue[0].length > 1) {
				api.emit('EXPAND_ON_LOAD');
			} else {
				api.setState('selectedItems', targetPathValue);
			}
		});
}
]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-27 05:35:20</sys_created_on>
        <sys_id>bd25f87547432110ff50249bd36d4352</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Initialise Items</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ux_client_script_bd25f87547432110ff50249bd36d4352</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-27 05:35:20</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
